<chapter id="config">
    <title>Configuration</title>

    <sect1 id="config-faces">
        <title>Configuring JavaServer Faces</title>
        <para>
			Facelets comes with an extensible <literal>ViewHandler</literal>.  This is the only necessary integration point within your <literal>faces-config.xml</literal>.			
		</para>
		<programlisting><![CDATA[<faces-config>		
  <application>
    <view-handler>
      com.sun.facelets.FaceletViewHandler
    </view-handler>    
  </application> 
</faces-config>]]></programlisting>
		<para>
			The <literal>FaceletViewHandler</literal> utilizes several <literal><![CDATA[<context-param>]]></literal> declarations in your <literal>web.xml</literal> which are detailed in <xref linkend="config-webapp-init"/>.
		</para>
		<sect2 id="config-faces-ri">
			<title>JavaServer Faces RI</title>
			<para>
				See <xref linkend="gettingstarted"/> for a tutorial that uses JavaServer Faces RI as an example.  More information on the JSF RI is available at:
			</para>
			<itemizedlist>
				<listitem>
					<para>http://javaserverfaces.dev.java.net</para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="config-faces-apache">
			<title>Apache MyFaces</title>
			<para>
				Apache MyFaces has it's own version of the JavaServer Faces API included in its distribution.  Currently, Apache MyFaces is only up to the 1.1 specification, but has not yet passed the TCK.
			</para>
			<itemizedlist>
				<listitem>
					<para>http://myfaces.apache.org</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	
	<sect1 id="config-webapp">
        <title>Web Application Descriptors</title>
		
		<sect2 id="config-webapp-init">
			<title>Initialization Parameters</title>
			<para>
				  These parameters help with development and increase the flexibility of Facelet use.
			</para>
			<table>
			<title>Web.xml Parameter List</title>
			<tgroup cols="3">
				<thead>
					<row>
						<entry>Parameter Name</entry>
						<entry>Default Value</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>facelets.LIBRARIES</entry>
						<entry></entry>
						<entry>A semicolon (<literal>;</literal>) delimitted list of paths to Facelet tag libraries, relative to your application's root.  These libraries will be loaded when the first request hits the <literal>FaceletViewHandler</literal> for page compilation.</entry>
						<entry>/WEB-INF/facelets/foo.taglib.xml; /WEB-INF/facelets/bar.taglib.xml</entry>
					</row>
					<row>
						<entry>facelets.DECORATORS</entry>
						<entry></entry>
						<entry>A semicolon (<literal>;</literal>) delimitted list of class names of type <literal>com.sun.facelets.tag.TagDecorator</literal>, with a no-argument constructor.  These decorators will be loaded when the first request hits the <literal>FaceletViewHandler</literal> for page compilation.</entry>
						<entry>com.sun.facelets.tag.jsf.html.HtmlDecorator</entry>
					</row>
					<row>
						<entry>facelets.DEVELOPMENT</entry>
						<entry>false</entry>
						<entry>Setting this to true will cause the <literal>FaceletViewHandler</literal> to print out debug information in an easy to use screen when an error occurs during the rendering process.</entry>
						<entry>true</entry>
					</row>
					<row>
						<entry>facelets.BUFFER_SIZE</entry>
						<entry>-1</entry>
						<entry>The buffer size to set on the response when the <literal>ResponseWriter</literal> is generated.  By default the value is -1, which will not assign a buffer size on the response.  This should be increased if you are using development mode in order to guarantee that the response isn't partially rendered when an error is generated.</entry>
						<entry>8192</entry>
					</row>
					<row>
						<entry>facelets.REFRESH_PERIOD</entry>
						<entry>2</entry>
						<entry>When a page is requested, what interval in <literal>seconds</literal> should the compiler check for changes.  If you don't want the compiler to check for changes once the page is compiled, then use a value of <literal>-1</literal>. Setting a low refresh period helps during development to be able to edit pages in a running application.</entry>
						<entry>-1</entry>
					</row>
                                        <row>
						<entry>facelets.RESOURCE_RESOLVER</entry>
						<entry>com.sun.facelets.impl.DefaultResourceResolver</entry>
						<entry>Optionally provide an alternate ResourceResolver that will replace the default logic of allowing the FacesContext resolve the resource URL.</entry>
						<entry>my.company.IDEResourceResolver</entry>
					</row>
					<row>
						<entry>facelets.VIEW_MAPPINGS</entry>
						<entry></entry>
						<entry>A semicolon (<literal>;</literal>) delimitted list of resources that Facelets should use.  If no resource paths are specified, Facelets will handle all requests (DEFAULT). If one or more paths are specified, Facelets will only use the ones specified, otherwise fall back on the parent or default <literal>ViewHandler</literal> (JSP).  Note, this requires the FacesServlet in your <literal>web.xml</literal> to be mapped with a prefix for capturing multiple file types ex: <literal>/faces/*</literal>.</entry>
						<entry>/demos/*; *.xhtml</entry>
					</row>
					<row>
						<entry>facelets.SKIP_COMMENTS</entry>
						<entry>true</entry>
						<entry>A boolean value that tells the compiler to skip comments (default is true).  Even if you comment out code in your page, the tags will not be compiled but expressions (EL) will be treated as if they were inlined-- still compiled and evaluated for output in the document.  Skipping comments will remove all comments completely from the document.</entry>
						<entry>false</entry>
					</row>
				</tbody>
			</tgroup>
		  </table>
		</sect2>
		
		<sect2 id="config-webapp-security">
			<title>Security</title>
			<para>
				Java applications can restrict access to resources or pages by outside users.  This feature is common to all application servers and part of the Servlet specification.
			</para>
			<para>
				Lets presume that you want to take advantage of developing simple Facelet XHTML documents that are viewable in your browser during development.  When your application is deployed to production, you don't want anyone from the outside to access your XHTML documents unless they are served through the JavaServer Faces Servlet.
			</para>
			<programlisting><![CDATA[<web-app>
			
  <!-- servlets and such would be above -->

  <security-constraint>	 
    <display-name>Restrict XHTML Documents</display-name>
    <web-resource-collection>
      <web-resource-name>XHTML</web-resource-name>
      <url-pattern>*.xhtml</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <description>Only Let 'developer's access XHTML pages</description>
      <role-name>developer</role-name>
    </auth-constraint>
  </security-constraint>

</web-app>]]></programlisting>
			<para>
				You can read more about Security in the Web Tier at http://java.sun.com/webservices/docs/1.3/tutorial/doc/Security2.html
			</para>
		</sect2>
		
	</sect1>
	
	<sect1 id="config-logging">
        <title>Logging</title>
        <para>
			Facelets uses <literal>java.util.Logger</literal> for handling logging.  This was done to reduce library dependencies while taking advantage of many Servlet container's ability to modify logging levels on the fly.
		</para>
		<para>
			For many, using the JDK 1.4 <literal>java.util.Logger</literal> will be new to them.  You can read more on it at http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/index.html
		</para>
		<table>
			<title>Facelet Logger Names</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>facelets.compiler</entry>
						<entry>For outputting debug information about the compilation process.  This would include namespace resolution for TagLibraries and XML events.  Most of the output will be <literal>FINE</literal>.</entry>
					</row>
					<row>
						<entry>facelets.factory</entry>
						<entry>Information about the inner workings of the <literal>FaceletFactory</literal>.</entry>
					</row>
					<row>
						<entry>facelets.tag.component</entry>
						<entry>Debug information that helps with component lifecycles in relation to Facelets.</entry>
					</row>
					<row>
						<entry>facelets.viewhandler</entry>
						<entry>Will output view-id mapping/resolution and the states of your views.</entry>
					</row>
				</tbody>
			</tgroup>
		  </table>
		  <para>
			For those who are currently developing a Facelets project and would like to have all the debug information available on both your application server and in your IDE; modify the <literal>logging.properties</literal> in your <literal>JRE/lib</literal> directory and add the following lines to the end of that file:
		  </para>
		  <programlisting><![CDATA[facelets.level = FINEST

# uncomment any of the below

#facelets.compiler.level = SEVERE
#facelets.tag.component.level = INFO
#facelets.viewhandler.level = SEVERE]]></programlisting>
	</sect1>
	
</chapter>


