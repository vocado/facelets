<chapter id="template">
    <title>Templating and Re-Use</title>
    
    <preface id="template-overview">
        <title>Overview</title>
        <para>
			When I set out to design the Facelets framework, my main emphasis was ease of integration with JavaServer Faces.  A ways into the the notebook of ideas, I saw that templating and re-use would have to be just as important within your documents, if not more important than the JSF integration features.  Thusly, the Facelet compiler makes special accomodations to the built-in UI tag library for high-perforance templating in your pages.  This section acts as both an introduction and a whiteboard for ideas you may pursue with Facelets and JavaServer Faces.
		</para>
	</preface>
	
	<sect1 id="template-detail">
        	<title>Template/Client Relationships</title>
        	<para>
        		When describing templating within Facelets, we have two roles: the template and the template client.
        	</para>
        	<para>
        		Any document can act as a template; but what makes a document a template?  It just simply uses one or more <literal><![CDATA[<ui:insert/>]]></literal> tags to inject content from another source.
        	</para>
        	<para>
        		The other half of the equation is the template client.  This includes documents that use the <literal><![CDATA[<ui:component/>]]></literal>, <literal><![CDATA[<ui:composition/>]]></literal>, <literal><![CDATA[<ui:fragment/>]]></literal>, or <literal><![CDATA[<ui:decorate/>]]></literal>.  Each of those tags is detailed in the sections below.
        	</para>
			
			<sect2 id="template-detail-wrap">
				<title>Wrapping Content within a Template</title>
				<para>
					A template client can refrain from using <literal><![CDATA[<ui:define>]]></literal> tags in their body; then the target template only uses a single <literal><![CDATA[<ui:insert/>]]></literal> (without the <literal>name</literal> attribute).  This will cause the body of the template client to be injected into the template wherever the 'nameless' <literal><![CDATA[<ui:insert/>]]></literal> is located.
				</para>
				<programlisting><![CDATA[<!-- template document -->
...
<span class="repeatingBox">
  <c:forEach begin="1" end="10">
    <ui:insert/><br/>
  </c:forEach>
</span>
...]]></programlisting>
				<programlisting><![CDATA[<!-- template client document -->
...
<ui:composition template="template.xhtml">
  I'm in the spin cycle <h:outputText value="#{random.name}"/>!
</ui:composition>
...]]></programlisting>
			</sect2>
			
			<sect2 id="template-detail-piecemeal">
				<title>Piecemeal Content within a Template</title>
				<para>
					A template client can break up its body within multiple, named <literal><![CDATA[<ui:define>]]></literal> tags.  These tags may specify what goes in the menu, in the header, and within the content area all at once.  See <xref linkend="gettingstarted-view"/> for a good example of this type of templating.
				</para>
			</sect2>
			
			<sect2 id="template-detail-deep">
				<title>Multi-Level Templating</title>
				<para>
					Template use may go multiple levels deep.  This means that a template client may use a template which in turn may use a template, which may also use a template, and then it may use yet another template... you get the picture.
				</para>
				<para>
					Templating is backed by the a <literal>TemplateManager</literal> that has a stack of <literal>TemplateClient</literal> instances.  Tags like <literal><![CDATA[<ui:composition>]]></literal> implement <literal>TemplateClient</literal>.  When a template is being evaluated and comes upon a <literal><![CDATA[<ui:insert/>]]></literal> tag, it will ask the <literal>TemplateManager</literal> for a <literal>TemplateClient</literal> that either has a match for the tag's name attribute, or the top-most <literal>TemplateClient</literal> on the stack.
				</para>
				<para>
					An example would be having a <literal><![CDATA[<ui:insert name="title"/>]]></literal> tag in the template.  The <literal>TemplateManager</literal> will walk through its internal stack of <literal>TemplateClients</literal>, asking each one for a content under the name <literal>title</literal>.  It will continue through the stack until one is found.  If none are found, then the original template is free to include the default content.  See <xref linkend="template-insert"/> for more information on default content.
				</para>
			</sect2>
			
        </sect1>
	
	<sect1 id="template-component">
		<title><![CDATA[<ui:component/>]]></title>
		<table>
			<title>Component Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>id</entry>
						<entry>false</entry>
						<entry>A unique id may be provided, otherwise Facelets will automatically assign one under the same logic it uses for all <literal>UIComponents</literal>.</entry>
						<entry>mainMenu</entry>
					</row>
					<row>
						<entry>binding</entry>
						<entry>false</entry>
						<entry>This binding attribute is used the same as with any other <literal>UIComponent</literal> such that it allows you to reference them as a property of a JavaBean.  If that target property did not have a <literal>UIComponent</literal> instance assigned already, JavaServer Faces will lazily create an instance for you and set it on your JavaBean before continuing with building the tree.</entry>
						<entry>#{page.menu}</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>component</literal> tag and the <literal>composition</literal> tag (below) behave exactly the same, except the <literal>component</literal> tag will insert a new <literal>UIComponent</literal> instance into the tree as the root of all the child components/fragments it has.
		</para>
		<programlisting><![CDATA[Text before will be removed.
<ui:component binding="#{backingBean.menu}">
  <ul id="mainMenu">
  <c:forEach var="link" items="#{menuOptions[role]}">
	<c:choose>
	  <c:when test="#{link.id == page}">
		<li class="current"><a href="#{link.uri}">#{link.text}</a></li>
	  </c:when>
	  <c:otherwise>
		<li><a href="#{link.uri}">#{link.text}</a></li>
	  </c:otherwise>
	</c:choose>
  </c:forEach>
  </ul>
</ui:component>
Text after will be removed.]]></programlisting>
		<para>
			Using the ability to use Tag files in your tag libraries, see <xref linkend="taglib-create-source"/>, you could include the above <literal>component</literal> into your pages while having the attributes automatically made available as variables within the document above:
		</para>
		<programlisting><![CDATA[...
<span id="header">
  <my:mainMenu page="home" role="#{user.role}"/>
</span>
...]]></programlisting>
		<para>
			Pretty cool eh?
		</para>
	</sect1>
	
	<sect1 id="template-composition">
		<title><![CDATA[<ui:composition/>]]></title>
		<table>
			<title>Composition Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>template</entry>
						<entry>false</entry>
						<entry>The resolvable URI of the template to use.  The content within the <literal>composition</literal> tag will be used in populating the template specified.</entry>
						<entry>/WEB-INF/templates/detal-template.xhtml</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			Facelets is founded on the idea of compositions. This means that a <literal>UIComponent</literal> tree can be defined in multiple Facelet pages and executed in part or whole. Some other frameworks, like Tapestry (http://jakarta.apache.org/tapestry), may define a single component within a page, Facelets instead marks the start of a branch of child <literal>UIComponents</literal>-- a composition if you will.
		</para>
		<programlisting><![CDATA[Text before will be removed.
<ui:composition>
  #{dynamic.text}
  <h:inputText id="myText" value="#{foo.bar}"/>
</ui:composition>
Text after will be removed.]]></programlisting>
		<para>
			This means you can start a full XHTML document in your favorite visual tool with CSS definitions, but have Facelets trim everything outside of the <literal><![CDATA[<ui:composition/>]]></literal> tag.  Here's a simple example of using a composition in separate document:
		</para>
		<programlisting><![CDATA[...
<h:column>
  <ui:include src="/composition.xhtml"/>
</h:column>
...]]></programlisting>
		<para>
			Lets say this composition was included inside of a <literal><![CDATA[<h:column/>]]></literal> tag/component; it would gain two children based on the above example: <literal>#{dynamic.text}</literal> and the <literal><![CDATA[<h:inputText/>]]></literal>.
		</para>
		<para>
			The composition tag has templating abilities, to read more about how templating is coordinated, jump over to <xref linkend="template-define"/> and <xref linkend="template-insert"/>.
		</para>
	</sect1>
	
	<sect1 id="template-debug">
		<title><![CDATA[<ui:debug/>]]></title>
		<table>
			<title>Debug Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>hotkey</entry>
						<entry>false</entry>
						<entry>The hot key to use in combination with 'CTRL' + 'SHIFT' to launch the debug window.  By default, when the <literal>debug</literal> tag is used, you may launch the debug window with 'CTRL' + 'SHIFT' + 'D'.  This value cannot be an EL expression.</entry>
						<entry>d</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>debug</literal> tag will capture the component tree and variables when it is encoded, storing the data for retrieval later.  You may launch the debug window at any time from your browser by pressing 'CTRL' + 'SHIFT' + 'D' (by default).
		</para>
		<programlisting><![CDATA[...
  <ui:debug hotkey="d" rendered="#{initParam.debugMode}"/>
 </body>
</html>
...]]></programlisting>
		<para>
			In the above example, we use the hot key 'd' to launch the debug window.  Creating debug output on every request adds some overhead, so you can use the <literal>UIComponent</literal> <literal>rendered</literal> property to turn debugging on or off based on some expression.  In this example, debugging is backed by an entry in the <literal>web.xml</literal>.
		</para>
		<para>
			The <literal>debug</literal> tag doesn't need to be used with the <literal>facelet.DEVELOPMENT</literal> parameter.  The best place to put this tag is in your site's main template where it can be enabled/disabled across your whole application.  If your application uses multiple windows, you might want to assign different hot keys to each one.
		</para>
	</sect1>
	
	<sect1 id="templating-decorate">
		<title><![CDATA[<ui:decorate/>]]></title>
		<table>
			<title>Decorate Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>template</entry>
						<entry>true</entry>
						<entry>The resolvable URI of the template to use.  The content within the <literal>decorate</literal> tag will be used in populating the template specified.</entry>
						<entry>/WEB-INF/templates/sideBox.xhtml</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>decorate</literal> tag acts the same as a <literal>composition</literal> tag, but it will not trim everything outside of it.  This is useful in cases where you have a list of items in a document, which you would like to be decorated or framed.  The sum of it all is that you can take any element in the document and decorate it with some external logic as provided by the <literal>template</literal>.
		</para>
		<programlisting><![CDATA[Text before will stay.
<ui:decorate template="/WEB-INF/templates/sideBox.xhtml">
  <ui:define name="title">Product Search</ui:define>
  <ui:define name="body">
    ...
  </ui:define>
</ui:decorate>
Text after will stay.]]></programlisting>
		<para>
			In some cases, it would make sense to externalize your "Product Search" box into a separate file, in other cases it doesn't and the <literal>decorate</literal> tag allows you to inline as such.
		</para>
		<para>
			For more information on how templating works in relation to the <literal><![CDATA[<ui:define/>]]></literal> tags, see <xref linkend="template-define"/>.
		</para>
	</sect1>
	
	<sect1 id="template-define">
		<title><![CDATA[<ui:define/>]]></title>
		<table>
			<title>Define Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>name</entry>
						<entry>true</entry>
						<entry>The literal name for this definition.  This name will match up with a <literal><![CDATA[<ui:insert/>]]></literal> tag in a target template.</entry>
						<entry>header</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>define</literal> tag can be used within tags that allow templating.  This includes <literal>composition</literal> and <literal>decorate</literal> tags.
		</para>
		<programlisting><![CDATA[Text before will stay.
<ui:decorate template="/WEB-INF/templates/sideBox.xhtml">
  <ui:define name="title">Product Search</ui:define>
  <ui:define name="body">
    ...
  </ui:define>
</ui:decorate>
Text after will stay.]]></programlisting>
		<para>
			The use of this tag will be familiar to those that have used Struts Tiles, for example.  The <literal>define</literal> tag is used in conjuction with the target template's <literal>insert</literal> tag, which you can read more about in <xref linkend="template-insert"/>.
		</para>
	</sect1>
	
	<sect1 id="template-fragment">
		<title><![CDATA[<ui:fragment/>]]></title>
		<table>
			<title>Fragment Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>id</entry>
						<entry>false</entry>
						<entry>A unique id may be provided, otherwise Facelets will automatically assign one under the same logic it uses for all <literal>UIComponents</literal>.</entry>
						<entry>mainMenu</entry>
					</row>
					<row>
						<entry>binding</entry>
						<entry>false</entry>
						<entry>This binding attribute is used the same as with any other <literal>UIComponent</literal> such that it allows you to reference them as a property of a JavaBean.  If that target property did not have a <literal>UIComponent</literal> instance assigned already, JavaServer Faces will lazily create an instance for you and set it on your JavaBean before continuing with building the tree.</entry>
						<entry>#{uiCache['searchResults']}</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			Just like <literal>composition</literal> has <literal>decorate</literal> as a non-trimming version of the same behavior, <literal>component</literal> has <literal>fragment</literal>.  This allows you to logically insert a <literal>UIComponent</literal> into the tree and possibly bind this fragment to a JavaBean property or Map for management.
		</para>
		<programlisting><![CDATA[The Text above will be used.
<ui:fragment binding="#{uiCache['searchResult']}">
  <div id="searchResults">
	...
  </div>
</ui:fragment>
The Text below will be used.]]></programlisting>
		<para>
			The <literal>fragment</literal> tag was also added to Facelets to get around some of the optimizations used in handling text within your document.  If you are using components such as <literal><![CDATA[<f:panelGrid/>]]></literal>, which renders its children, you may want more control over the building process that Facelets does and using a <literal>fragment</literal> tag will help guarantee parent/child relationships for you.
		</para>
	</sect1>
	
	<sect1 id="template-include">
		<title><![CDATA[<ui:include/>]]></title>
		<table>
			<title>Include Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>src</entry>
						<entry>true</entry>
						<entry>A literal or EL expression that specifies the target Facelet that you would like to include into your document.</entry>
						<entry>anotherPage.xhtml</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			This tag should be familiar to most.  The <literal>include</literal> tag can point at any Facelet which might use the <literal>composition</literal> tag, <literal>component</literal> tag, or simply be straight XHTML/XML. 
		</para>
		<para>
			It should be noted that the <literal>src</literal> path does allow relative path names, but they will always be resolved against the original Facelet requested.
		</para>
		<programlisting><![CDATA[<span id="header">
  <ui:include src="#{backingBean.headerSource}"/>
</span>]]></programlisting>
		<para>
			The <literal>include</literal> tag can be used in conjunction with multiple <literal><![CDATA[<ui:param/>]]></literal> tags to pass EL expressions/values to the target page. See <xref linkend="template-param"/>, for more on passing variables to other pages.
		</para>
	</sect1>
	
	<sect1 id="template-insert">
		<title><![CDATA[<ui:insert/>]]></title>
		<table>
			<title>Insert Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>name</entry>
						<entry>false</entry>
						<entry>The optional name attribute matches the associated <literal><![CDATA[<ui:define/>]]></literal> tag in this template's client.  If no name is specified, it's expected that the whole template client will be inserted.</entry>
						<entry>header</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>insert</literal> tag is used within your templates to declare spots of replaceable data.
		</para>
		<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title><ui:insert name="title">Default Title</ui:insert></title>
</head>
<body>
<h1>Here is the Page Header</h1>
<ui:insert name="body">
  Default Body
</ui:insert>
</body>
</html>]]></programlisting>
		<para>
			As you can see, these <literal>insert</literal> tags indicate to the Facelets compiler where to insert content from the template client.  If the template client doesn't specify content for the specified name, then the body of the ui:insert tag in the template is used.
		</para>
	</sect1>
	
	<sect1 id="template-param">
		<title><![CDATA[<ui:param/>]]></title>
		<table>
			<title>Param Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>name</entry>
						<entry>true</entry>
						<entry>The name of the variable to pass to the included Facelet.</entry>
						<entry>user</entry>
					</row>
					<row>
						<entry>value</entry>
						<entry>true</entry>
						<entry>The literal or EL expression value to assign to the named variable.</entry>
						<entry>#{sessionScope.user}</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			From reading about Facelets templating, you've probably become familiar with passing fragments of content between pages.  With the <literal>param</literal> tag, you can pass objects as variables instead of just fragments of content.  You can use the <literal>param</literal> tag wherever a <literal>define</literal> tag is used within <literal>composition</literal> or <literal>decorate</literal> tags, in addition to passing objects to an <literal>include</literal> tag.
		</para>
		<programlisting><![CDATA[<span id="leftNav">
  <ui:include src="/WEB-INF/siteNav.xhtml">
    <ui:param name="user" value="#{currentUser}"/>
    <ui:param name="page" value="home"/>
  </ui:include>
</span>]]></programlisting>
		<para>
			In the above example, when <literal>siteNav.xhtml</literal> is used, it will have <literal>user</literal> and <literal>page</literal> variables available for use which will reference the the <literal>currentUser</literal> object and the <literal>home</literal> string literal.
		</para>
	</sect1>
	
	<sect1 id="template-remove">
		<title><![CDATA[<ui:remove/>]]></title>
		<para>
			The <literal>remove</literal> tag does not have any attributes and is used to remove chunks of XML content from a Facelet at compilation time.  The <literal>remove</literal> tag is often used in conjunction with the <literal>jsfc</literal> feature, see <xref linkend="taglib-use-jsfc"/>. 
		</para>
		<programlisting><![CDATA[...
<ui:remove>
  This will be removed.
</ui:remove>
...
<span jsfc="ui:remove">
	This won't be compiled either <h:outputText value="#{foo.bar}"/>
</span>
...]]></programlisting>
		<para>
			There are times in development when you need to quickly remove parts of the document just for testing purposes, or you would like to leave a 'template-model' in your document, but don't want it to be part of the final Facelet.
		</para>
	</sect1>
	
	<sect1 id="template-repeat">
		<title><![CDATA[<ui:repeat/>]]></title>
		<table>
			<title>Repeat Tag Attributes</title>
			<tgroup cols="4">
				<thead>
					<row>
						<entry>Attribute</entry>
						<entry>Required?</entry>
						<entry>Description</entry>
						<entry>Example</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>value</entry>
						<entry>true</entry>
						<entry>Expression for the List of items to iterate over</entry>
						<entry>#{blog.currentEntries}</entry>
					</row>
					<row>
						<entry>var</entry>
						<entry>true</entry>
						<entry>The literal name of the variable to use while iterating</entry>
						<entry>entry</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			The <literal>repeat</literal> tag should be used in almost all cases instead of the <literal>c:forEach</literal> to iterate over content with JSF.  The <literal>repeat</literal> tag is often used in conjunction with the <literal>jsfc</literal> feature, see <xref linkend="taglib-use-jsfc"/>. 
		</para>
		<programlisting><![CDATA[...
<dl>
    <ui:repeat value="#{company.departments}" var="dept">
    <dt>#{dept.name}</dt>
	    <ui:repeat value="#{dept.employees}" var="emp">
		<dd>#{emp.lastName}, #{emp.firstName}</dd>
		</ui:repeat>
    </ui:repeat>
</dl>
...]]></programlisting>
		<para>
			While this is a great step for JSF compositions, we can do better with the <literal>jsfc</literal> attribute where the <literal>repeat</literal> tag will provide some special behavior inclusive of the declared tag.
		</para>
		<programlisting><![CDATA[...
<table>
<tr jsfc="ui:repeat" value="#{dept.employees}" var="emp" class="#{emp.manager ? 'mngr' : 'peon'}">
   <td>#{emp.lastName}</td><td>#{emp.firstName}</td>
</tr>
</table>
...]]></programlisting>
	</sect1>
</chapter>


