<chapter id="dev">
    <title>Extending Facelets</title>
    
    <sect1 id="dev-tag">
		<title>Tag Development Overview</title>
		<para>
			Facelets use stateless <literal>TagHandlers</literal> to coordinate tree creation.  <literal>TagHandlers</literal> are not like JSP tags in that Facelets builds a static/stateless tree of <literal>TagHandlers</literal> shared by all requests.  For more information on how Facelets coordinates view creation, see <xref linkend="architecture-views"/>.
		</para>
		<para>
			Foundation classes, such as those included in <xref linkend="dev-meta"/>, will take care of the knowing when to apply state and build up the component tree for a given request.  If you are writing your own <literal>TagHandler</literal>, you can use the <literal>ComponentSupport.isNew(UIComponent)</literal> to determine if it's okay for you to modify the newly created <literal>UIComponent</literal>.
		</para>
		<programlisting><![CDATA[public void apply(FaceletContext ctx, UIComponent parent) {
  if (ComponentSupport.isNew(parent)) {
    // okay to apply new state information to component
  }
}]]></programlisting>
		<para>
			For JSTL-like functionality, it's up to you if you want to use the <literal>ComponentSupport.isNew(UIComponent)</literal> method to determine behavior.  But again, if you use the foundation handlers in <xref linkend="dev-meta"/>, these checks will be take care of for you.
		</para>		
    </sect1>
	
	<sect1 id="dev-taghandler">
		<title>Custom TagHandlers</title>
		<para>
			Facelets are composed of many different kinds of <literal>TagHandler</literal> instances.  Just like a <literal>Facelet</literal>, all of the <literal>TagHandlers</literal> are stateless for offering a higher degree of performance.  This section goes over customizing your tag library with your own tags, beyond what the default features of Facelets can offer you within the tag library XML configs.
		</para>
		<para>
			Facelets allows you to write stateless tags that can be used in dictating component tree creation.  This includes JSTL-like functionality that may be tied to business logic.  Including your custom tag into your library requires using the <literal>handler-class</literal> element.
		</para>
		<programlisting><![CDATA[<tag>
  <tag-name>if</tag-name>
  <handler-class>com.mycompany.IfHandler</handler-class>
</tag>]]></programlisting>
			<para>
				All tags in a Facelets extend <literal>com.sun.facelets.tag.TagHandler</literal> which provides some base functionality for tying XML data to your Java code.  Here is an example of JSTL's <literal><![CDATA[<c:if/>]]></literal> tag:
			</para>
			<programlisting><![CDATA[public final class IfHandler extends TagHandler {

  // possible attributes
  private final TagAttribute test;
  private final TagAttribute var;

  /**
   * @param config
   */
  public IfHandler(TagConfig config) {
      super(config);
      
      // helper method for getting a required attribute
      this.test = this.getRequiredAttribute("test");
      
      // helper method
      this.var = this.getAttribute("var");
  }

  /**
   * Threadsafe Method for controlling evaluation of
   * its child tags, represented by "nextHandler"
   */
  public void apply(FaceletContext ctx, UIComponent parent)
          throws IOException, FacesException, ELException {
      boolean b = this.test.getBoolean(ctx);
      if (this.var != null) {
          ctx.setAttribute(var.getValue(ctx), new Boolean(b));
      }
      if (b) {
          this.nextHandler.apply(ctx, parent);
      }
  }
}]]></programlisting>
		<para>
			Now if that isn't easy, I don't know what is.  Facelets uses the concept of a <literal>TagAttribute</literal> which encapsulates EL operations for you and also produces informative exceptions if an error did occur.  Another really great example is catching exceptions with JSTL's <literal>CatchHandler</literal>:
		</para>
		<programlisting><![CDATA[public final class CatchHandler extends TagHandler {

  private final TagAttribute var;

  public CatchHandler(TagConfig config) {
      super(config);
      this.var = this.getAttribute("var");
  }

  public void apply(FaceletContext ctx, UIComponent parent)
          throws IOException, FacesException, FaceletException, ELException {
      try {
          this.nextHandler.apply(ctx, parent);
      } catch (Exception e) {
          if (this.var != null) {
              ctx.setAttribute(this.var.getValue(ctx), e);
          }
      }
  }
}]]></programlisting>
		<para>
			Isn't that awesome? The <literal>TagHandler</literal> provides some member variables, much like a JSP tag, to help you:
		</para>
		<table>
			<title>TagHandler Member Variables</title>
			<tgroup cols="3">
				<thead>
					<row>
						<entry>Variable Name</entry>
						<entry>Class Type</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>tagId</entry>
						<entry>java.lang.String</entry>
						<entry>A unique id, assigned at compilation time for this stateless element.  This can be used in combination with the <literal>FaceletContext.generateUniqueId(String)</literal> to generate consistently unique ids for a given page evaluation.</entry>
					</row>
					<row>
						<entry>tag</entry>
						<entry>com.sun.facelets.tag.Tag</entry>
						<entry>A <literal>Tag</literal> instance which is Facelet's representation of the element declared in a page.  The <literal>Tag</literal> includes namespace/name information, along with accessors to the <literal>TagAttributes</literal> specified on the element declared in the page.</entry>
					</row>
					<row>
						<entry>nextHandler</entry>
						<entry>com.sun.facelets.FaceletHandler</entry>
						<entry>A generic interface representing zero or more child tags and their associated handlers.  Since Facelets uses stateless <literal>TagHandlers</literal>, the parent handler can evaluate the <literal>nextHandler</literal> any number of times or not at all to dictate component tree creation.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			For more information on the inner workings of Facelets, please hop over to <xref linkend="architecture"/>.
		</para>
	</sect1>
    
    <sect1 id="dev-meta">
			<title>Meta Tags</title>
			<para>
				The Facelets API understands that developers will run into cases where they need 'special' logic for setting attributes.  The API provides a few foundation <literal>TagHandlers</literal> that you can extend to handle unique cases.  These foundation classes take care of the dirty work of tree creation in JavaServer Faces.
			</para>
			<para>
				<literal>com.sun.facelets.tag.MetaTagHandler</literal> acts as the foundation for auto-wiring abilities in Facelets.  The <literal>MetaTagHandler</literal> uses a few objects: <literal>MetaRuleset</literal>, <literal>MetaRule</literal>, and <literal>Metadata</literal> to coordinate auto-wiring.  The following sub sections provide examples of this coordination to customize specialized components.
			</para>
			<para>
				The <literal>MetaTagHandler</literal> provides a couple methods for extension: <literal>setAttributes(FaceletContext,Object)</literal> and <literal>createMetaRuleset(Class)</literal>.  The method <literal>setAttributes(FaceletContext,Object)</literal> will be invoked for you by the classes described below which will take care of wiring all attributes according to the <literal>MetaRuleset</literal> created by <literal>createMetaRuleset(Class)</literal>.
			</para>
			<para>
				Anytime you do provide custom tags (handlers), you would use the <literal>handler-class</literal> element in your <literal>tag</literal> just as described in <xref linkend="taglib-create-custom"/>.
			</para>
			<sect2 id="dev-meta-component">
				<title>Custom ComponentHandlers</title>
				<para>
					Component wiring can be customized by extending the <literal>com.sun.facelets.tag.jsf.ComponentHandler</literal> class.
				</para>
				<programlisting><![CDATA[public class HtmlComponentHandler extends ComponentHandler {

  /**
   * @param config
   */
  public HtmlComponentHandler(ComponentConfig config) {
      super(config);
  }

  protected MetaRuleset createMetaRuleset(Class type) {
      return super.createMetaRuleset(type).alias("class", "styleClass");
  }

}]]></programlisting>
				<para>
					In this example, we override the <literal>createMetaRuleset(Class)</literal> to alias wiring <literal>class</literal> attributes to the <literal>styleClass</literal> JavaBean property.  To add your custom component to your tag library, do the following:
				</para>
				<programlisting><![CDATA[...
<tag>
  <tag-name>custom</tag-name>
  <component>
    <component-type>com.company.Component</component-type>
    <renderer-type>com.company.OptionalRenderer</renderer-type>
    <handler-class>com.company.HtmlComponentHandler</handler-class>
  </component>
</tag>
...]]></programlisting>
			</sect2>
			<sect2 id="dev-meta-validator">
				<title>Custom ValidateHandlers</title>
				<para>
					In the previous example, Facelets will automatically wire <literal>UIComponent</literal> JavaBean properties and expressions to a given instance.  The bonus is that <literal>MetaTagHandler</literal> will set attributes on any instance of <literal>Object</literal>.  This opens the doors for working with things like <literal>Validators</literal> by extending <literal>com.sun.facelets.tag.jsf.ValidateHandler</literal>:
				</para>
				<programlisting><![CDATA[public final class ValidateDelegateHandler extends ValidateHandler {

  private final TagAttribute validatorId;

  public ValidateDelegateHandler(TagConfig config) {
      super(config);
      this.validatorId = this.getRequiredAttribute("validatorId");
  }

  /**
   * Uses the specified "validatorId" to get a new Validator instance from the
   * Application.
   * 
   * @see javax.faces.application.Application#createValidator(java.lang.String)
   * @see com.sun.facelets.tag.jsf.ValidateHandler#createValidator(com.sun.facelets.FaceletContext)
   */
  protected Validator createValidator(FaceletContext ctx) {
      return ctx.getFacesContext().getApplication().createValidator(
              this.validatorId.getValue(ctx));
  }

  protected MetaRuleset createMetaRuleset(Class type) {
      return super.createMetaRuleset(type).ignoreAll();
  }
}]]></programlisting>
				<para>
					In the above example, we've decided to do all of the attribute mapping ourselves, so we tell the <literal>MetaRuleset</literal> to <literal>ignoreAll()</literal>.
				</para>
			</sect2>
			<sect2 id="dev-meta-converter">
				<title>Custom ConvertHandlers</title>
				<para>
					Continuing on the capabilities in customizing <literal>Validators</literal> within Facelets, you may do the same with <literal>Converters</literal> by extending <literal>com.sun.facelets.tag.jsf.ConvertHandler</literal>.
				</para>
				<programlisting><![CDATA[public final class ConvertNumberHandler extends ConvertHandler {

    private final TagAttribute locale;

    public ConvertNumberHandler(TagConfig config) {
        super(config);
        this.locale = this.getAttribute("locale");
    }

    /**
     * Returns a new NumberConverter
     * 
     * @see NumberConverter
     * @see com.sun.facelets.tag.jsf.ConverterHandler#createConverter(com.sun.facelets.FaceletContext)
     */
    protected Converter createConverter(FaceletContext ctx)
            throws FacesException, ELException, FaceletException {
        return ctx.getFacesContext().getApplication().createConverter(NumberConverter.CONVERTER_ID);
    }

    /* (non-Javadoc)
     * @see com.sun.facelets.tag.ObjectHandler#setAttributes(com.sun.facelets.FaceletContext, java.lang.Object)
     */
    protected void setAttributes(FaceletContext ctx, Object obj) {
        super.setAttributes(ctx, obj);
        NumberConverter c = (NumberConverter) obj;
        if (this.locale != null) {
            c.setLocale(ComponentSupport.getLocale(ctx, this.locale));
        }
    }

    protected MetaRuleset createMetaRuleset(Class type) {
        return super.createMetaRuleset(type).ignore("locale");
    }
}]]></programlisting>
				<para>
					This is probably the best example of customization so far.  The <literal>ConvertHandler</literal> allows you to override the method <literal>createConverter(FaceletContext)</literal> to return any <literal>Converter</literal> instance.  Also, the <literal>setAttributes(FaceletContext,Object)</literal> was overridden to do special wiring for the <literal>Locale</literal> on the <literal>NumberConverter</literal>.
				</para>
				<para>
					The <literal>NumberConverter</literal> has many properties, but we only wanted to make a special case for <literal>locale</literal>, so we only tell the <literal>MetaRuleset</literal> to ignore that one attribute because we will take care of it ourselves.
				</para>
			</sect2>
        </sect1>
        
            <sect1 id="dev-viewHandler">
        <title>FaceletViewHandler</title>
        <para>
			Facelets comes with a <literal>ViewHandler</literal> that you may extend.  Some extension points include initializing the compiler and setting up alternate response writers for JavaServer Faces to use.
        </para>
        <para>
			To learn more, look at the Facelets JavaDocs for the <literal>com.sun.facelets.FaceletViewHandler</literal>.
        </para>
	</sect1>
	
	<sect1 id="dev-tagdecorators">
		<title>Tag Decorators</title>
		<para>
			The compiler within Facelets allows you to specify multiple <literal>TagDecorator</literal> instances.  These implementations can do things like transforming all HTML elements to their JSF equivalents automatically.
		</para>
		<para>
			To add your custom <literal>TagDecorator</literal> to your Facelets project, you may extend the <literal>FaceletViewHandler</literal> and override the compiler initialization methods to add your <literal>TagDecorator</literal> to the passed <literal>Compiler</literal> instance.
		</para>
	</sect1>
	
</chapter>


