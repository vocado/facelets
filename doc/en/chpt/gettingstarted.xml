<chapter id="gettingstarted">
    <title>Getting Started with Facelets</title>
    
    <preface id="gettingstarted-goals">
		<title>Tutorial Goals</title>
		<para>
			This section will walk you through creating a simple Number Guess web application.  Familiarity with Java Web Applications is required along with some knowledge of JavaServer Faces.  For those who are new to those technologies, you can browse:
		</para>
		<itemizedlist>
			<listitem>
				<para>Java Web Applications - http://www.onjava.com/pub/a/onjava/2001/03/15/tomcat.html</para>
			</listitem>
			<listitem>
				<para>JavaServer Faces - http://java.sun.com/j2ee/javaserverfaces/</para>
			</listitem>
		</itemizedlist>
		<para>
			The steps in this tutorial are as follows:
		</para>
		<orderedlist>
			<listitem>
				<para><xref linkend="gettingstarted-download"/> for downloading Facelets binaries or for accessing Facelets source code from CVS.</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-dependencies"/> will provide an overview of libraries needed to use JavaServer Faces with Facelets</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-layout"/> shows the familiar directory structure you should use for this tutorial</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-setup"/> has initial configuration settings you need to get up and running</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-bean"/> details the one JavaBean our tutorial requires and how to use it in JavaServer Faces</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-view"/> shows how to create and use a template within JavaServer Faces components</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-nav"/> includes how to tie your views together</para>
			</listitem>
			<listitem>
				<para><xref linkend="gettingstarted-deploy"/> finishes off the tutorial with deploying your application</para>
			</listitem>
		</orderedlist>
		<para>
			While this tutorial is a little basic for some, you may want to jump back to <xref linkend="guide"/> for direction.
		</para>
    </preface>

    <sect1 id="gettingstarted-download">
        <title>Downloading Facelets</title>
        <para>
			Facelets is currently available as a sub-project of the JavaServer Faces Reference Implementation on Java.net (http://facelets.dev.java.net/).  You have a couple options for downloading Facelets:
		</para>
		<itemizedlist>
			<listitem>
				Download a release binary from http://facelets.dev.java.net/servlets/ProjectDocumentList.  Once downloaded, unzip the project into an appropriate folder.
			</listitem>
			<listitem>
				<para>
					If you are a member of Java.net, you may checkout Facelets from CVS.  Make sure you are located in the appropriate directory and use the following CVS commands (Replace <literal>USER_NAME</literal> with your Java.net Member Login Name):
				</para>
				<orderedlist>
					<listitem>
						<literal>cvs -d :pserver:USER_NAME@cvs.dev.java.net:/cvs login</literal>
					</listitem>
					<listitem>
						<literal>cvs -d :pserver:USER_NAME@cvs.dev.java.net:/cvs checkout facelets</literal>
					</listitem>
				</orderedlist>
				<para>
					More information on accessing Java.net's CVS repository is located at http://facelets.dev.java.net/servlets/ProjectSource. 
				</para>
			</listitem>
		</itemizedlist>
		<para>
			See <xref linkend="building"/> for more information on building Facelets from source (specifically if you used CVS).
		</para>
    </sect1>
	
	<sect1 id="gettingstarted-dependencies">
		<title>Dependencies</title>
		<para>
			Facelets will work with both version 1.1 and 1.2 of JavaServer Faces and makes no bearing on the implementation used.  Facelets also uses the new EL-API and again can be used with any implementation of that API.  Please reference the table below to make sure your dependencies are available to Facelets:
		</para>
		<table>
			<title>Facelets Dependencies</title>
			<tgroup cols="5">
				<thead>
					<row>
						<entry>Project</entry>
						<entry>Build Req?</entry>
						<entry>Included?</entry>
						<entry>Description</entry>
						<entry>Link</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>JavaServer Faces RI</entry>
						<entry>No</entry>
						<entry>No</entry>
						<entry>The reference implementation of JSF 1.1 and JSF 1.2 are available for use with your application.</entry>
						<entry>http://javaserverfaces.dev.java.net/</entry>
					</row>
					<row>
						<entry>Apache MyFaces</entry>
						<entry>No</entry>
						<entry>No</entry>
						<entry>The alternative to the JSF reference implementation.  MyFaces currently implements the JSF 1.1 specification.</entry>
						<entry>http://myfaces.apache.org/</entry>
					</row>
					<row>
						<entry>JavaServer Faces 1.2 API</entry>
						<entry>Yes</entry>
						<entry>No</entry>
						<entry>JSF 1.2 API that works with the new EL Specification.  This API is packaged with the JavaServer Faces RI and available on Java.net.</entry>
						<entry>http://javaserverfaces.dev.java.net/</entry>
					</row>
					<row>
						<entry>EL API</entry>
						<entry>Yes</entry>
						<entry>Yes</entry>
						<entry>The standardized EL specification that is standalone from JSP or JSF, but used by both frameworks.</entry>
						<entry>http://glassfish.dev.java.net/</entry>
					</row>
					<row>
						<entry>EL RI</entry>
						<entry>No</entry>
						<entry>Yes</entry>
						<entry>The reference implementation that is used by Facelets for handling EL.</entry>
						<entry>http://glassfish.dev.java.net/</entry>
					</row>
					<row>
						<entry>XML SAX</entry>
						<entry>Yes</entry>
						<entry>No</entry>
						<entry>This dependency should not be an issue for most deployments as it's a standard part of web containers and JREs.</entry>
						<entry>http://java.sun.com/xml/</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			For more information on using these projects:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Those projects that are required to build Facelets, please see <xref linkend="building"/>.
				</para>
			</listitem>
			<listitem>
				<para>
					If you would like to use Apache MyFaces with Facelets, see <xref linkend="config-faces-apache"/>.
				</para>
			</listitem>
			<listitem>
				<para>
					To use Facelets with the JavaServer Faces Reference Implementation, see <xref linkend="config-faces-ri"/>.
				</para>
			</listitem>
		</itemizedlist>
	</sect1>
	
	<sect1 id="gettingstarted-layout">
		<title>Directory Structure</title>
		<para>
			Since we are putting together a sample web application, your project should have the following directory structure (presumes JSF RI use):
		</para>
		<programlisting><![CDATA[$DEPLOY_DIR
+- /WEB-INF
   +- /classes
   +- /lib
      +- /jsf-facelets.jar
      +- /el-api.jar
      +- /el-ri.jar
         [jsf implementation dependencies]
      +- /jsf-api.jar
      +- /jsf-impl.jar
      +- /commons-digester.jar
      +- /commons-logging.jar
      +- /commons-collections.jar
      +- /commons-beanutils.jar
   +- /web.xml
   +- /faces-config.xml
+- /[xhtml documents]
]]></programlisting>
		<para>
			For more information on web application deployments in general, there is additional documentation at http://java.sun.com/j2ee and at http://jakarta.apache.org/tomcat.
		</para>
	</sect1>
	
	<sect1 id="gettingstarted-setup">
		<title>Project Setup</title>
		
		<sect2 id="gettingstarted-setup-web">
			<title>Web.xml Descriptor</title>
			<para>
				First configure your application's <literal>web.xml</literal>.  Make sure that the <literal>FacesServlet</literal> is mapped and JSF's <literal>javax.faces.DEFAULT_SUFFIX</literal> initialization parameter is specified.  This standard initialization parameter lets JSF know what documents to use for specifying your views.
			</para>
			<programlisting><![CDATA[<web-app>
		
  <!-- Use Documents Saved as *.xhtml -->	
  <context-param>
    <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
    <param-value>.xhtml</param-value>
  </context-param>
  
  <!-- Special Debug Output for Development -->
  <context-param>
    <param-name>facelets.DEVELOPMENT</param-name>
    <param-value>true</param-value>
  </context-param>
	  
  <!-- Optional JSF-RI Parameters to Help Debug -->
  <context-param>
    <param-name>com.sun.faces.validateXml</param-name>
    <param-value>true</param-value>
  </context-param>
  <context-param>
    <param-name>com.sun.faces.verifyObjects</param-name>
    <param-value>true</param-value>
  </context-param>
	  
  <!-- Faces Servlet -->
  <servlet>
    <servlet-name>Faces Servlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
	  
  <!-- Faces Servlet Mapping -->
  <servlet-mapping>
    <servlet-name>Faces Servlet</servlet-name>
    <url-pattern>*.jsf</url-pattern>
  </servlet-mapping>
	  
</web-app>]]></programlisting>
		</sect2>
		
		<sect2 id="gettingstarted-setup-faces">
			<title>Faces-Config.xml</title>
			<para>
				JavaServer Faces is extremely interoperable with other frameworks.  Most of this flexibility lies in JSF's <literal>Application</literal> composite which includes: a default <literal>ActionListener</literal>, <literal>ELResolver</literal>, <literal>StateManager</literal>, <literal>NavigationHandler</literal>, and <literal>ViewHandler</literal>.  Facelets is used as the application's <literal>ViewHandler</literal>, represented by the class <literal>com.sun.facelets.FaceletViewHandler</literal>.
			</para>
			<para>
				To configure JavaServer Faces to use Facelets as the <literal>ViewHandler</literal>, modify your project's <literal>faces-config.xml</literal> to specify the <literal><![CDATA[<view-handler>]]></literal> element:
			</para>
			<programlisting><![CDATA[<faces-config>		
  <application>
    <view-handler>
      com.sun.facelets.FaceletViewHandler
    </view-handler>    
  </application> 
</faces-config>]]></programlisting>
			<para>
				Even though there are other parts to the <literal>faces-config.xml</literal> needed for this tutorial, only the <literal><![CDATA[<view-handler>]]></literal> element is required for Facelets use.
			</para>
		</sect2>
		
	</sect1>
	
	<sect1 id="gettingstarted-bean">
		<title>The NumberBean</title>
		
		<sect2 id="gettingstarted-bean-java">
			<title>The Java Code</title>
			<para>
				We will have a simple, straight-forward JavaBean that will act as our 'controller' for our NumberGuess tutorial.  Note that the desired class name will be <literal>tutorial.NumberBean</literal>.
			</para>
			<programlisting><![CDATA[package tutorial;

import java.io.Serializable;

import java.util.Random;

import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

public class NumberBean implements Serializable {

  protected final static Random rand = new Random();

  protected int min;
  protected int max;
  protected int guess;
  protected int actual;
    
  // Default Constructor
  public NumberBean() {
    this.min = 1;
    this.max = 10;
  }
   
  // called by JSF to validate user input
  public void validate(FacesContext context, UIComponent component, Object value)
      throws ValidatorException {
      
    // coerce the value to an int
    try {
      int param = Integer.parseInt(value.toString());
    
      // validate param
      if (param > this.max || param < this.min) {
          FacesMessage msg = new FacesMessage("Guess must be between "+this.min+" and "+this.max);
          throw new ValidatorException(msg);
      }
    } catch (NumberFormatException e) {
      FacesMessage msg = new FacesMessage("Must be a number");
      throw new ValidatorException(msg);
    }
  }
    
  // lazy generate our actual value
  public synchronized int getActual() {
    if (this.actual == 0) {
        this.actual = rand.nextInt(this.max-this.min);
        this.actual += this.min;
    }
    return this.actual;
  }
  
  // our message for the response
  public String getMessage() {    
    if (this.guess == this.getActual()) {
      return "Sweet, you got it right!";
    } else if (this.guess < this.getActual()) {
      return "Sorry, try something higher";
    } else {
      return "Too bad, go lower";
    }
  }
  
  // other bean properties
  public int getMin() { return this.min; }
  public int getMax() { return this.max; }
  public int getGuess() { return this.guess; }
    
  public void setMin(int min) { this.min = min; }
  public void setMax(int max) { this.max = max; }
  public void setGuess(int guess) { this.guess = guess; }
    
}]]></programlisting>
			<para>
				The above class should be compiled with Java and located at <literal>$DEPLOY_DIR/WEB-INF/classes/tutorial/NumberBean.class</literal>.  If you do not know how to compile Java classes, please stop this tutorial and go to http://java.sun.com for introductory help.
			</para>
		</sect2>
		
		<sect2 id="gettingstarted-bean-config">
			<title>Faces Bean Descriptor</title>
			<para>
				You can map JavaBeans into your JavaServer Faces application via the <literal>faces-config.xml</literal>.  JavaBeans used in your application can be wired together by bean properties and can be provided scope: a single <literal>request</literal>, a whole <literal>session</literal> visit, for everyone in the <literal>application</literal>, or <literal>none</literal> if you don't want it stored directly.
			</para>
			<programlisting><![CDATA[<faces-config>
			
  <!-- from project setup -->
  <application>
    <view-handler>
      com.sun.facelets.FaceletViewHandler
    </view-handler>    
  </application>
  
  <!-- our NumberBean we just created -->
  <managed-bean>
    <managed-bean-name>NumberBean</managed-bean-name>
    <managed-bean-class>tutorial.NumberBean</managed-bean-class>
    <managed-bean-scope>session</managed-bean-scope>
    <managed-property>
      <property-name>min</property-name>
      <value>1</value>
    </managed-property>
    <managed-property>
      <property-name>max</property-name>
      <value>10</value>
    </managed-property>
  </managed-bean>

</faces-config>]]></programlisting>
		</sect2>
		<para>
			The <literal><![CDATA[<managed-bean>]]></literal> element above tells JSF to guarantee a <literal>tutorial.NumberBean</literal> is available under the attribute name <literal>NumberBean</literal> in the user's <literal>session</literal>.  In addition, we've allowed our <literal>NumberBean</literal> to be configured by setting the <literal>min</literal> and <literal>max</literal> values a user can guess.  It should be noted that JavaServer Faces will lazy load our <literal>NumberBean</literal> when it's first accessed by our application.
		</para>
	</sect1>
	
	<sect1 id="gettingstarted-view">
		<title>Creating Web Pages</title>

                <para>This section contains the only content the
                "Getting Started" chapter that is entirely specific to
                Facelets.</para>

		<para>
			Facelets emphasizes its ability to template content in your application.  Templating promotes re-use and eases long term maintenance of your application, allowing content to be changed in one spot, but used in multiple pages.  While using templating features wouldn't be necessary for this simple application, it does serve as a tutorial.  For more information on this topic, see <xref linkend="template"/>.
		</para>
		<para>
			We will create three documents: a template page, a page for user input, and finally a page to display a response:
		</para>
		<programlisting><![CDATA[$DEPLOY_DIR
+- /WEB-INF
   [newly added pages below]
+- /template.xhtml
+- /guess.xhtml
+- /response.xhtml
]]></programlisting>
		
		<sect2 id="gettingstarted-view-template">
			<title>The Page Template - template.xhtml</title>
			<para>
				Facelets comes with a library of UI (user interface) tags to use in writing your application.  We will only focus on using a couple of them in creating a page called <literal>template.xhtml</literal>.
			</para>
			<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Facelets: Number Guess Tutorial</title>
<style type="text/css">
<!--
body {
  font-family: Verdana, Arial, Helvetica, sans-serif;
  font-size: small;
}
-->
</style>
</head>

<body>
<h1>
  <ui:insert name="title">Default Title</ui:insert>
</h1>
<p>
  <ui:insert name="body">Default Body</ui:insert>
</p>
</body>

</html>]]></programlisting>
			<para>
				Facelets requires valid XML markup.  Our sample application is using valid XHTML since these documents will be used on the web. You can even view this document within your favorite visual tool.  A couple things to take notice of:
			</para>
			<orderedlist>
				<listitem>
					<para>Use of proper namespaces such as <literal>xmlns:ui="http://java.sun.com/jsf/facelet"</literal> to specify tag libraries loaded by Facelets.  In this example, we are declaring that Facelet's own UI library of tags will be prefixed with a <literal>ui</literal>.  Namespace definitions need to be specified before you use a tag from that library, otherwise Facelets will properly error when it compiles your document.</para>
				</listitem>
				<listitem>
					<para><literal><![CDATA[<ui:insert>]]></literal> is used to declare parts of the document that can be inserted or overwritten.  If a document doesn't override the insertion point with the specified name (<literal>title</literal> or <literal>body</literal>), then the default text from the original template is used.</para>
				</listitem>
			</orderedlist>
		</sect2>
		
		<sect2 id="gettingstarted-view-guess">
			<title>Configuring User Input - guess.xhtml</title>
			<para>
				In this example page, we will incorporate components from the JavaServer Faces standard component libraries.
			</para>
			<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html">
<body>

This text above will not be displayed.

<ui:composition template="/template.xhtml">

This text will not be displayed.

  <ui:define name="title">
    I'm thinking of a number from #{NumberBean.min} to #{NumberBean.max}.  Can you guess it?
  </ui:define>

This text will also not be displayed.

  <ui:define name="body">
    <h:form id="helloForm">
      <h:inputText type="text" id="userNo" value="#{NumberBean.guess}" validator="#{NumberBean.validate}"/>
      <br/>
      <h:commandButton type="submit" id="submit" action="success" value="Submit" />
      <br/>
      <h:message showSummary="true" showDetail="false" style="color: red; font-weight: bold;" id="errors1" for="userNo"/>
    </h:form>
  </ui:define>

This text will not be displayed.
  
</ui:composition>

This text below will also not be displayed.

</body>
</html>]]></programlisting>
		<orderedlist>
			<listitem>
				<para>Using a <literal><![CDATA[<ui:composition>]]></literal> tag will trim everything outside of it.  This means that you can create/edit your documents with a visual editor, but Facelets will only use what's between the <literal><![CDATA[<ui:composition>]]></literal> tags.</para>
			</listitem>
			<listitem>
				<para>The <literal><![CDATA[<ui:composition>]]></literal> uses the <literal>template</literal> attribute to reference the template or look and feel of this page.</para>
			</listitem>
			<listitem>

				<para>Two
				<literal><![CDATA[<ui:define>]]></literal>
				tags are specified with names that match
				the ones used in the template we had
				created.  This means that when Facelets
				builds your page, those blocks of
				content will be placed appropriately in
				the template.  Any text that happens to
				reside inside the
				<literal><![CDATA[<ui:composition>]]></literal>
				tag, but outside of the
				<literal><![CDATA[<ui:define>]]></literal>
				tags is not displayed in the rendered
				output.  </para>

			</listitem>
			<listitem>

				<para>Facelets also can use 'inlined' EL
				Expressions to make outputting dynamic
				content extremely easy.  In the example
				above,
				<literal>#{NumberBean.max}</literal>
				will display the <literal>max</literal>
				property of the
				<literal>NumberBean</literal> in your
				session.  EL expressions may also reside
				outside tag attributes, in the space
				between tags, but you must keep in mind
				that the result of evaluating the
				expression will only appear in the
				rendered output if template text in that
				same position would appear.</para>

			</listitem>
		</orderedlist>
		<para>
			If you have questions or do not understand the attributes used for <literal><![CDATA[<h:inputText>]]></literal>, <literal><![CDATA[<h:commandButton>]]></literal>, or <literal><![CDATA[<h:message>]]></literal>; documentation on those components are available at http://java.sun.com/j2ee/javaserverfaces.  Keep in mind that Facelets uses the same attributes, behavior, and naming conventions as the tags specified for JavaServer Faces' JSP TLD documents.
		</para>
		</sect2>
		
		<sect2 id="gettingstarted-view-response">
			<title>Displaying the Response - response.xhtml</title>
			<para>
				Finally, if a user entered valid input as specified by the <literal>NumberBean.validate</literal> method, then we need a page to give them feedback on their guess.
			</para>
			<programlisting><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html">
<body>

<ui:composition template="/template.xhtml">

  <ui:define name="title">
    #{NumberBean.message}
  </ui:define>
  
  <ui:define name="body">
    <form jsfc="h:form">
    <input jsfc="h:commandButton" type="submit" id="back" value="Back" action="success"/>
    </form>
  </ui:define>
  
</ui:composition>

</body>
</html>]]></programlisting>
			<orderedlist>
				<listitem>
					<para>Again we use an <literal><![CDATA[<ui:composition>]]></literal> to trim unecessary content from our page and use the <literal>template.xhtml</literal>.</para>
				</listitem>
				<listitem>
					<para>We also introduced the <literal>jsfc</literal> attribute which allows the XHTML tags to be compiled into <literal><![CDATA[<h:form>]]></literal> and <literal><![CDATA[<h:commandButton>]]></literal> when the page is compiled.  This means that a designer's visual editor will render a normal form and button, but it will be transformed into a dynamic <literal>UIComponent</literal> when compiled by Facelets.</para>
				</listitem>
			</orderedlist>
			<para>
				That's it for the pages.  Again, if you have questions about JavaServer Faces components or would like some additional background, visit http://java.sun.com/j2ee/javaserverfaces
			</para>
		</sect2>
	</sect1>
	
	<sect1 id="gettingstarted-nav">
		<title>Handling Navigation</title>
		<para>
			We would like to tie our two pages together from <literal>guess.xhtml</literal> to <literal>response.xhtml</literal> and back again.  To do this, we need to go back into the <literal>faces-config.xml</literal> to specify navigation cases.
		</para>
		<programlisting><![CDATA[<faces-config>
			
  <!-- from project setup -->
  <application>
    <view-handler>
      com.sun.facelets.FaceletViewHandler
    </view-handler>    
  </application>
  
  <!-- our NumberBean we created before -->
  <managed-bean>
    <managed-bean-name>NumberBean</managed-bean-name>
    <managed-bean-class>tutorial.NumberBean</managed-bean-class>
    <managed-bean-scope>session</managed-bean-scope>
    <managed-property>
      <property-name>min</property-name>
      <value>1</value>
    </managed-property>
    <managed-property>
      <property-name>max</property-name>
      <value>10</value>
    </managed-property>
  </managed-bean>
  
  <!-- going from guess.xhtml to response.xhtml -->
  <navigation-rule>
    <from-view-id>/guess.xhtml</from-view-id>
    <navigation-case>
      <from-outcome>success</from-outcome>
      <to-view-id>/response.xhtml</to-view-id>
    </navigation-case>
  </navigation-rule>

  <!-- going from response.xhtml to guess.xhtml -->
  <navigation-rule>
    <from-view-id>/response.xhtml</from-view-id>
    <navigation-case>
        <from-outcome>success</from-outcome>
      <to-view-id>/guess.xhtml</to-view-id>
    </navigation-case>
  </navigation-rule>

</faces-config>]]></programlisting>
		<para>
			In both pages, we included <literal>commandButtons</literal> in some form with <literal>action</literal> attributes specified.  The <literal>action</literal> attribute is mapped to the <literal><![CDATA[<from-outcome>]]></literal> element in your <literal>faces-config.xml</literal>.  This method of handling navigation is extremely flexible and more information on this aspect of JavaServer Faces is included at http://java.sun.com/j2ee/javaserverfaces.
		</para>
	</sect1>
	
	<sect1 id="gettingstarted-deploy">
		<title>Deployment</title>
		<para>
			Finally, you should be able to deploy all of these artifacts now to your web application.  Your application should generate a random number and allow you to flip between your <literal>guess</literal> page and <literal>response</literal> page.  To access your application, remember that the <literal>javax.faces.web.FacesServlet</literal> in your <literal>web.xml</literal> was mapped to <literal>*.jsf</literal>.  To start your guessing fun, point your browser to <literal>http://localhost:8080/numberguess/guess.jsf</literal> (presuming you used the application name <literal>numberguess</literal>).
		</para>
		<para>
			If you have additional problems or questions, going to Facelet's home page at http://facelets.dev.java.net will provide you with additional resources such as forums, mailing lists, and additional documentation.
		</para>
	</sect1>
	
</chapter>


