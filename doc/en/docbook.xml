<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5b1//EN"
                      "../shared/docbook-dtd/docbookx.dtd"
[
<!ENTITY gettingstarted            SYSTEM "chpt/gettingstarted.xml">
<!ENTITY el                        SYSTEM "chpt/el.xml">
<!ENTITY configuration             SYSTEM "chpt/configuration.xml">
<!ENTITY taglib                    SYSTEM "chpt/taglib.xml">
<!ENTITY architecture              SYSTEM "chpt/architecture.xml">
<!ENTITY template                  SYSTEM "chpt/template.xml">
<!ENTITY development               SYSTEM "chpt/development.xml">
<!ENTITY building                  SYSTEM "chpt/building.xml">
]>

<book lang="en">

    <bookinfo>
        <authorgroup>
          <collab><collabname>Jacob Hookom</collabname></collab>

          <othercredit><firstname>Ed</firstname>
          <surname>Burns</surname><contrib>Editing and bug
          fixes</contrib></othercredit>
          
          <othercredit><firstname>Hiroshi</firstname>
          <surname>Iwatani</surname><contrib>Editing</contrib></othercredit>

        </authorgroup>
        <title>Facelets - JavaServer Faces View Definition Framework</title>
        <subtitle>Developer Documentation</subtitle>
        <releaseinfo>1.0.0</releaseinfo>
    </bookinfo>

    <toc/>
	
	<preface id="intro">
        <title>Introduction</title>
        <para>
            The web community is eagerly seeking a light-weight, templating framework backed by JavaServer Faces as the industry standard. While JavaServer Faces and JavaServer Pages technology (<abbrev>JSP</abbrev>) are meant to be aligned, Facelets steps outside of the JSP specification and provides a highly performant, JSF-centric view technology. Anyone who has created a JSP page will be able to do the same with Facelets and familiar XML-tag use. The difference is under the hood where all the burden of the JSP vendor API is removed to greatly enhance JSF as a platform and provide easy plug-and-go development without requiring JSP tag development.
        </para>
		<para>
			JavaServer Faces <literal>UIComponents</literal> are first class citizens within Facelets; there's no need to develop extra objects to integrate. There's also no need to learn yet another XML schema to define your views.
		</para>
		<para>
			Facelets includes many features such as:
		</para>
		<itemizedlist>
			<listitem>
				Works with JSF 1.1 and JSF 1.2, including Sun's RI and Apache MyFaces.
			</listitem>
			<listitem>
				Zero Tag development time for UIComponents
			</listitem>
			<listitem>
				Fast Templating/Decorators for Components and Pages
			</listitem>
			<listitem>
				The ability to specify <literal>UIComponent</literal> trees in separate files (<literal>UICompositions</literal>)
			</listitem>
			<listitem>
				Line/Tag/Attribute precise Error Reporting
			</listitem>
			<listitem>
				Specify Tags in Separate Files, even packaged with Jars
			</listitem>
			<listitem>
				Full EL support, including Functions
			</listitem>
			<listitem>
				Build-time EL Validation
			</listitem>
			<listitem>
				XML configuration files aren't necessary
			</listitem>
			<listitem>
				Reserves the '<literal>jsfc</literal>' attribute which acts the same as Tapestry's jwcid (Example: <literal><![CDATA[<input id="bar" type="text" jsfc="h:inputText" value="#{foo.bar}"/>]]></literal>)
			</listitem>
			<listitem>
				Plugable Decorators to really make designer's job easy (Example: transform <literal><![CDATA[<input type="text"/>]]></literal> to <literal><![CDATA[<h:inputText/>]]></literal> at compile time)
			</listitem>
			<listitem>
				Works with any <literal>RenderKit</literal>
			</listitem>
			<listitem>
				Facelet APIs aren't dependent on a Web Container
			</listitem>
		</itemizedlist>
		<para>
			Everyone wants to be more designer friendly, and Tapestry seems to be the only choice developers are pursuing. On the other hand, JSF is the standard everyone would like to have happen, but JSF needs a more "pluggable" <literal>ViewHandler</literal> framework that is both designer and developer friendly.
		</para>
		<para>
			Out of the box, Facelets provides full support for all components specified in the JavaServer Faces specification, including limited support for JSTL tags such as <literal><![CDATA[<c:forEach>]]></literal> and <literal><![CDATA[<c:if>]]></literal>.  Where developers really gain an advantage with using Facelets is its ability to auto-wire additional artifacts to your XML documents such as <literal>UIComponents</literal>, <literal>Validators</literal>, and <literal>Converters</literal>.
		</para>
		<para>
			Facelets is a clean slate for correcting concerns with JSF. Templating, re-use, and ease of development are top priorities that will help bring developers on board with JSF as a suitable platform for large scale projects.
		</para>
    </preface>
    
    <preface id="guide" revision="1">
		<title>Documentation Guide</title>
		<para>
			To get a jump start on development, this guide covers varying degrees of depth.  Please follow these steps:
		</para>
		<itemizedlist>
			<listitem>

				<para><xref linkend="gettingstarted"/>
				as an entry-level tutorial on using
				JavaServer Faces and Facelets together.
				All of the content in this section is
				generic to Faces with the exception of
				<xref linkend="gettingstarted-view"/>.
				This section describes the simplest
				Facelets templating scenario that could
				possibly work.</para>

			</listitem>
			<listitem>
				<para><xref linkend="config"/> for details on setting up your web application for use with Facelets.</para>
			</listitem>
			<listitem>
				<para><xref linkend="taglib"/> for incorporating JSF objects into Facelet documents as tags.</para>
			</listitem>
			<listitem>
				<para><xref linkend="template"/> to learn about how Facelets encourages templating and re-use in your documents.</para>
			</listitem>
			<listitem>
				<para><xref linkend="architecture"/> as an overview to the Facelets API and compiler.</para>
			</listitem>
			<listitem>
				<para><xref linkend="dev"/> as a starting point for extending Facelets functionality with custom tag handlers.</para>
			</listitem>
		</itemizedlist>
		<para>
			Additional documentation and resources such as: mailing lists, forums, and announcements, are available on Facelets' home page at:
		</para>
		<itemizedlist>
			<listitem>
				<para>http://facelets.dev.java.net</para>
			</listitem>
		</itemizedlist>
    </preface>
    
    &gettingstarted;
    
    &configuration;
    
    &taglib;
    
    &el;
    
    &template;
    
    &architecture;
    
    &development;
    
    &building;

</book>
