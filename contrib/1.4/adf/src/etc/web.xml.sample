<?xml version = '1.0' encoding = 'ISO-8859-1'?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>

  <!-- ADF Faces has its own ViewHandler, which is a "decorating"
      view handler - for example, it needs to wrap methods like renderView()
      to perform some extra pre- and post-handling.  Facelets, on the other
      hand, is more of a true ViewHandler - it actually implements
      renderView() (yeah, it decorates too, but forget about that
      for a second).  As a result, the world is a better place if
      the ADF Faces ViewHandler runs around the Facelets ViewHandler.
      But since Facelets is registered in WEB-INF/faces-config.xml,
      and ADF's is registered from META-INF/faces-config.xml in its
      JAR, exactly the opposite happens as per the JSF spec.

      Hence, the following config parameter, which ADF Faces
      exposes (as of EA19) to allow pushing a ViewHandler inside
      of ours.  FWIW, you retain the entire delegation stack - 
      just flipped around a bit - so that Facelets still decorates
      the standard ViewHandler, and therefore you've still got
      JSP support.
  -->
  <context-param>
    <param-name>oracle.adf.view.faces.ALTERNATE_VIEW_HANDLER</param-name>
    <param-value>com.sun.facelets.FaceletViewHandler</param-value>
  </context-param>

  <!-- Use client-side state saving.  In ADF Faces, it is an
       optimized, token-based mechanism that is almost always a
       better choice than the standard JSF server-side state saving. -->
  <context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
    <!--param-value>server</param-value-->
  </context-param>


  <filter>
    <filter-name>adfFaces</filter-name>
    <filter-class>oracle.adf.view.faces.webapp.AdfFacesFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>adfFaces</filter-name>
    <servlet-name>faces</servlet-name>
  </filter-mapping>


  <!-- Faces Servlet -->
  <servlet>
    <servlet-name>faces</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
  </servlet>
  
  <!-- resource loader servlet -->
  <servlet>
    <servlet-name>resources</servlet-name>
    <servlet-class>oracle.adf.view.faces.webapp.ResourceServlet</servlet-class>
  </servlet>

  <!-- Faces Servlet Mappings -->
  <servlet-mapping>
    <servlet-name>faces</servlet-name>
    <url-pattern>/faces/*</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>resources</servlet-name>
    <url-pattern>/adf/*</url-pattern>
  </servlet-mapping>


</web-app>
