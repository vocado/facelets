<!--
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 $Id: build.xml,v 1.27 2008-07-13 19:01:52 rlubke Exp $
-->
<project name="Facelets" default="all" basedir=".">
                                                                                
  <!-- =================== Environmental Properties ======================= -->
                                                                                
  <!-- Load user property definition overrides -->
  <property environment="env"/>
  <property file="user.properties" />
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
                                                                                
  <!-- Establish property definition defaults -->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>
  <property name="compile.source"      value="1.4"/>
  <property name="compile.target"      value="1.4"/>
  <property name="build"               value="build"/>
  <property name="dist"                value="dist"/>
  <property name="lib"                 value="lib"/>
  <property name="release"             value="release"/>
  <property name="doc"                 value="doc"/>
  <property name="jar"                 value="jsf-facelets.jar"/>

  <!-- Binary dependency info -->
  <property name="http.proxy.host"     value=""/>
  <property name="http.proxy.port"     value=""/>
  <property name="ibiblio.repo"        value="http://www.ibiblio.org/maven/"/>
  <property name="java.net.repo"       value="http://download.java.net/maven/1/"/>
  <property name="jsf.api.version"     value="1.2_04-p02"/>
  <property name="servlet.api.version" value="2.4"/>
  <property name="el.version"          value="1.0"/>
  <property name="jsf-api.jar"         value="jsf-api-${jsf.api.version}.jar"/>
  <property name="el-api.jar"          value="el-api-${el.version}.jar"/>
  <property name="el-ri.jar"           value="el-impl-${el.version}.jar"/>
  <property name="servlet-api.jar"     value="servlet-api-${servlet.api.version}.jar"/>


  <path id="compile.classpath">
    <pathelement location="${build}/classes"/>
    <fileset dir="lib" includes="*.jar"/>
    <pathelement location="${}"/>
  </path>


  <!-- ===================== Prepare Directories ========================= -->
  <target name="prepare">
                                                                                
    <!-- "Build" Hierarchy -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/classes"/>
    <mkdir dir="${build}/docs"/>
    <mkdir dir="${build}/docs/api"/>
    <mkdir dir="${build}/docs/dev"/>

    <!-- "Dist" Hierarchy -->
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist}/docs"/>
    <mkdir dir="${dist}/docs/api"/>
    <mkdir dir="${dist}/docs/dev"/>
    <mkdir dir="${dist}/src"/>
    <mkdir dir="${dist}/demo"/>
	
    <!-- CVS Dependencies -->
    <mkdir dir="${lib}"/>

    <uptodate property="docs.uptodate" targetfile="${build}/docs/api/index.html">
      <srcfiles dir="src" includes="**/*.java" />
    </uptodate>
  </target>
  
  <!-- ========================= Macros ================================= -->
  <macrodef name="compile">
    <attribute name="src"/>
	<attribute name="dest"/>
	<sequential>
      <javac srcdir="@{src}"
            destdir="@{dest}"
              debug="${compile.debug}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
             source="${compile.source}"
             target="${compile.target}">
        <classpath refid="compile.classpath"/>
      </javac>
	</sequential>
  </macrodef>
  
  <macrodef name="makewar">
    <attribute name="root"/>
    <attribute name="destfile"/>
    <element name="morefiles" optional="true"/>
    <sequential>
	  <antcall target="dist"/>
      <dirname property="@{destfile}.parent" file="@{destfile}"/>
      <mkdir dir="${@{destfile}.parent}"/>
	  <mkdir dir="build/@{root}/build"/>
	  <compile src="@{root}/src" dest="build/@{root}/build"/>
      <war destfile="@{destfile}"
           webxml="@{root}/web/WEB-INF/web.xml">
		<fileset dir="@{root}/web/">
		  <exclude name="@{root}/web/WEB-INF/web.xml"/>
		</fileset>
        <lib dir="${lib}">
          <exclude name="servlet-api.jar"/>
          <exclude name="j2ee.jar"/>
          <exclude name="portlet.jar"/>
	  <exclude name="myfaces-all.jar"/>
        </lib>
		<classes dir="build/@{root}/build"/>
        <lib file="${dist}/${jar}"/>
      </war>
    </sequential>
  </macrodef>

  <!-- ======================= Static Files ============================== -->
  <target name="static" depends="prepare">
                                                                                
    <!-- "Dist" Hierarchy -->
    <copy todir="${dist}">
      <fileset dir="." includes="BUILDING.txt"/>
      <fileset dir="." includes="LICENSE"/>
      <fileset dir="." includes="README.txt"/>
    </copy>
  </target>


  <!-- ======================== Compile Classes ========================== -->
  <target name="compile" depends="static"
   description="Compile API classes (Default)">
                                                                                
    <!-- Java classes -->
    <compile src="src/java" dest="${build}/classes"/>

    <copy todir="${build}/classes">
      <fileset dir="src/etc">
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
        <include name="**/*.dtd"/>
	    <include name="**/*.ent"/>
      </fileset>
    </copy>

  </target>


  <!-- ======================== Build JavaDoc =========================== -->
  <target name="javadoc" depends="prepare" unless="docs.uptodate">
   
    <javadoc
             windowtitle="JavaServer Faces Facelets"
             destdir="${build}/docs/api"
             sourcepath="src/java"
             doctitle="Facelets API Documentation"
             bottom="Copyright &amp;copy; 2005 All Rights Reserved." packagenames="com.sun.facelets.*"
             use="true">
       <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
       <link href="http://java.sun.com/j2ee/javaserverfaces/1.1_01/docs/api/"/>
       <classpath refid="compile.classpath"/>
    </javadoc>

  </target>
  
  <!-- ======================== Build DocBook =========================== -->
  <target name="doc" depends="prepare">
    <delete dir="${build}/docs/dev"/>
    <xslt basedir="${doc}/en"
           destdir="${build}/docs/dev"
           style="${doc}/../../shared/xhtml.xsl"
           includes="*.xml"
           force="true"/>
    <copy todir="${build}/docs/dev">
		<fileset dir="${doc}/en/rsc"/>
	</copy>
  </target>

  <!-- ===================== Distribution Files ========================= -->
  <target name="jar" depends="compile"
          description="Create jar">
                                                                                
    <!-- Create JAR file -->
    <jar jarfile="${dist}/${jar}"
         basedir="${build}/classes">
      <manifest>
        <attribute name="Implementation-Version" value="${release.version}"/>
      </manifest>
    </jar>
  </target>
 
  <target name="dist" depends="prepare,dependencies,compile,javadoc,jar"
   description="Create binary distribution">
                                                                                
    <!-- Copy Javadocs -->
    <copy todir="${dist}/docs/">
        <fileset dir="${build}/docs/"/>
    </copy>
                                                                                
    <!-- Copy API source files -->
    <copy todir="${dist}/src">
        <fileset dir="src"/>
    </copy>

    <!-- Copy Demo source files -->
    <copy todir="${dist}/demo">
        <fileset dir="demo"/>
    </copy>
         
  </target>

  <!-- ========================= Create Release ========================= -->
  <target name="release" depends="clean, dependencies, doc, dist">
    <mkdir dir="${release}/facelets-${release.version}"/>
	<ant target="-build-demo" antfile="demo/numberguess/build.xml"/>
	<ant target="-build-demo" antfile="demo/hangman/build.xml"/>
	<ant target="-build-demo" antfile="demo/starterkit/build.xml"/>
	<ant target="-build-demo" antfile="demo/portlet/build.xml"/>
    <copy todir="${release}/facelets-${release.version}" includeEmptyDirs="false">
       <fileset dir="${dist}"/>
    </copy>
    <mkdir dir="${release}/facelets-${release.version}/lib"/>
	<copy todir="${release}/facelets-${release.version}/lib">
      <fileset dir="${lib}">
        <exclude name="servlet-api.jar"/>
		<exclude name="j2ee.jar"/>
      </fileset>
    </copy>
    <copy file="README.TXT" todir="${release}/facelets-${release.version}"/>
    <copy file="LICENSE.TXT" todir="${release}/facelets-${release.version}"/>
    <zip destfile="facelets-${release.version}.zip" basedir="${release}" />
  </target>


  <!-- ====================== Clean Generated Files ===================== -->
  <target name="clean"
   description="Clean previous build results">
    <delete dir="${dependencies}"/>                                                                   
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${release}"/>
    <delete file="${jar}"/>
  </target>
 

  <!-- ========================= All In One Build ======================= -->
  <target name="all" depends="dist"
   description="Clean, dependencies, compile, and dist"/>
   
   
  <!-- =========================== Dependencies ========================= -->
  <target name="dependencies" depends="prepare">
     <condition property="missing.el-api" >
       <not>
          <available file="${lib}/${el-api.jar}"/>
       </not>
     </condition>
     <condition property="missing.el-ri" >
       <not>
          <available file="${lib}/${el-ri.jar}"/>
       </not>
     </condition>
     <condition property="missing.jsf-api">
         <not>
             <available file="${lib}/${jsf-api.jar}"/>
         </not>
     </condition>
     <condition property="missing.servlet-api">
         <not>
             <available file="${lib}/${servlet-api.jar}"/>
         </not>
     </condition>
     <condition property="set.proxy">
         <and>
            <length string="${http.proxy.host}" when="greater" length="0"/>
            <length string="${http.proxy.port}" when="greater" length="0"/>
         </and>
     </condition>
     <ant target="-set-proxy" />
     <ant target="-auto-depend-el-api" />
     <ant target="-auto-depend-el-ri" />
     <ant target="-auto-depend-jsf-api" />
     <ant target="-auto-depend-servlet-api" />
  </target>

  <target name="-set-proxy" if="set.proxy">
      <echo message="Using HTTP proxy ${http.proxy.host}:${http.proxy.port} to obtain binary dependencies."/>
      <setproxy proxyhost="${http.proxy.host}" proxyport="${http.proxy.port}"/>
  </target>
    
  <target name="-auto-depend-el-api" if="missing.el-api">
    <ant target="depend-el-api" />
  </target>

  <target name="-auto-depend-el-ri" if="missing.el-ri">
    <ant target="depend-el-ri" />
  </target>

  <target name="-auto-depend-jsf-api" if="missing.jsf-api">
     <ant target="depend-jsf-api"/>
  </target>

  <target name="-auto-depend-servlet-api" if="missing.servlet-api">
      <ant target="depend-servlet-api"/>
  </target>

  <target name="depend-servlet-api">
      <get src="${ibiblio.repo}/javax.servlet/jars/${servlet-api.jar}"
         dest="${lib}/${servlet-api.jar}"/>
  </target>
    
  <target name="depend-jsf-api">
    <get src="${java.net.repo}/javax.faces/jars/${jsf-api.jar}"
         dest="${lib}/${jsf-api.jar}"/>
  </target>
  
  <target name="depend-el-api">
  	<get src="${java.net.repo}/javax.el/jars/${el-api.jar}"
         dest="${lib}/${el-api.jar}"/>
  </target>
  
  <target name="depend-el-ri">
  	<get src="${java.net.repo}/el-impl/jars/${el-ri.jar}"
         dest="${lib}/${el-ri.jar}"/>
  </target>

<target name="push-to-maven-prepare">
  <taskdef resource="maven-repository-importer.properties">
    <classpath>
      <pathelement path="${lib}/maven-repository-importer-1.1.jar" />
    </classpath>
  </taskdef>
  <delete dir="${build}/maven-repo" /><!-- clean it -->
  <maven-repository-importer destdir="${build}/maven-repo" version="${release.version}">
    <artifact jar="${dist}/jsf-facelets.jar"  pom="jsf-facelets.pom" />
<!--
    <artifact jar="build/mysupercool-impl.jar" pom="mysupercool-impl.pom" srczip="build/mysupercool.src.zip" />
-->
  </maven-repository-importer>
</target>

<target name="push-to-maven" depends="push-to-maven-prepare">
  <!-- import to CVS-->
  <tstamp />
  <echo>importing to CVS...</echo>
  <cvs dest="${build}/maven-repo">
    <commandline>
      <argument value="-d:pserver:${user.name}@cvs.dev.java.net:/cvs" />
      <argument line="-z9 import -ko -W *.jar -kb -m" />
      <argument value="deploying new jars to the java.net maven repository" />

      <argument value="facelets/repo" />
      <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
    </commandline>
  </cvs>
</target>
 
</project>


 
